
void legacy() {
  float asp = (float) width / (float) height;

  glLoadIdentity();
  glScalef(1.0f/asp, 1.0, 1.0);

  glBegin(GL_TRIANGLES);

  glVertex2d(0.5, -0.29);
  glColor3d(1.0, 0.0, 0.0);

  glVertex2d(-0.5, -0.29);
  glColor3d(0.0, 1.0, 0.0);

  glVertex2d(0.0, 0.58);
  glColor3d(0.0, 0.0, 1.0);

  glEnd();
}

bool init = false;
uint vao = -1;
uint vbo = -1;
uint shader = -1;
int loc = -1;
float data[] =
{
  0.5, -0.29  /* 1.1 */, 1.0, 0.0, 0.0 /* 1.2 */,
  -0.5, -0.29 /* 2.1 */, 0.0, 1.0, 0.0 /* 2.2 */,
  0.0, 0.58   /* 3.1 */, 0.0, 0.0, 1.0 /* 3.2 */
};
const int N = 16;

const char* vertSrcFmt =
R"(
#version 460

layout(location=0) in vec2 pos;
layout(location=1) in vec3 color;

out vec4 v_color;

uniform float time;

mat2 rotate(float angle) {
  float c = cos(angle);
  float s = sin(angle);
  return mat2(c, -s, s, c);
}

void main() {
  v_color = vec4(color, 1.0);
  vec2 pos = pos;
  pos = rotate(time) * pos;
  pos.x /= %f;
  gl_Position = vec4(pos, 0.0, 1.0);
}
)";

const char* fragSrc =
R"(
#version 460

in vec4 v_color;

out vec4 f_color;

void main() {
  f_color = v_color;
}
)";

void modern() {
  if (!init) {
    glCreateVertexArrays(1, &vao);
    glCreateBuffers(1, &vbo);

    glVertexArrayVertexBuffer(vao, 0, vbo, 0, 5 * sizeof(float));

    glEnableVertexArrayAttrib(vao, 0);
    glEnableVertexArrayAttrib(vao, 1);

    glVertexArrayAttribFormat(vao, 0, 2, GL_FLOAT, false, 0 * sizeof(float));
    glVertexArrayAttribFormat(vao, 1, 3, GL_FLOAT, false, 2 * sizeof(float));

    glVertexArrayAttribBinding(vao, 0, 0);
    glVertexArrayAttribBinding(vao, 1, 0);

    glNamedBufferData(vbo, (long)(N * sizeof(float)), data, GL_STATIC_DRAW);

    uint vsh, fsh;
    vsh = glCreateShader(GL_VERTEX_SHADER);
    fsh = glCreateShader(GL_FRAGMENT_SHADER);
    shader = glCreateProgram();

    float asp = (float) width / (float) height;

    char* vertSrc = new char[1024];

    std::snprintf(vertSrc, 1024, vertSrcFmt, asp);

    glShaderSource(vsh, 1, &vertSrc, nullptr);
    glShaderSource(fsh, 1, &fragSrc, nullptr);

    glCompileShader(vsh);
    int status;
    glGetShaderiv(vsh, GL_COMPILE_STATUS, &status);
    if (status != GL_TRUE) {
      char buffer[512];
      glGetShaderInfoLog(vsh, 512, nullptr, buffer);
      throw std::runtime_error(buffer);
    }

    glCompileShader(fsh);
    glGetShaderiv(fsh, GL_COMPILE_STATUS, &status);
    if (status != GL_TRUE) {
      char buffer[512];
      glGetShaderInfoLog(fsh, 512, nullptr, buffer);
      throw std::runtime_error(buffer);
    }

    glAttachShader(shader, vsh);
    glAttachShader(shader, fsh);

    glLinkProgram(shader);
    glGetProgramiv(shader, GL_LINK_STATUS, &status);
    if (status != GL_TRUE) {
      char buffer[512];
      glGetProgramInfoLog(shader, 512, nullptr, buffer);
      throw std::runtime_error(buffer);
    }

    loc = glGetUniformLocation(shader, "time");
    init = true;
  }

  glUseProgram(shader);
  glUniform1f(loc, glfwGetTime());
  glBindVertexArray(vao);
  glBindBuffer(vbo, GL_ARRAY_BUFFER);
  glDrawArrays(GL_TRIANGLES, 0, 3);
}